{"mappings":"AAAA,IAAMA,qBAAuB,IACvBC,gBAAkB,GAClBC,cAAgB,GAChBC,WAAa,GAEbC,MAAQ,SAAAC,GACZC,aAAY,WACV,IAAMC,EAAQ,IAAIC,KAAKH,GAAc,IAAIG,KAEnCC,EAAUC,KAAKC,MACnBJ,EAASP,qBAAwBC,iBAE7BW,EAAUF,KAAKC,MACnBJ,GAAUP,qBAAuBC,iBAAoBC,eAEjDW,EAAQH,KAAKC,MACjBJ,GAAUP,qBAAuBC,gBAAkBC,eACjDC,YAGEW,EAAOJ,KAAKC,MAChBJ,GACGP,qBAAuBC,gBAAkBC,cAAgBC,aAGxDY,EAAc,GAAeC,OAAZF,EAAK,SAAgBE,OAATH,EAAM,KAAcG,OAAXJ,EAAQ,KAAWI,OAARP,GACvDQ,YAAYF,E,GACX,I,EAGCE,YAAc,SAAAC,GAClBC,SAASC,cAAc,QAAQC,UAAYH,C,EAG7Cd,MAAM,IAAII,KAAK","sources":["src/js/timer-2.js"],"sourcesContent":["const millisecondsInSecond = 1000;\nconst secondsInMinute = 60;\nconst minutesInHour = 60;\nconst hoursInDay = 24;\n\nconst timer = targetDate => {\n  setInterval(() => {\n    const delta = new Date(targetDate) - new Date();\n\n    const seconds = Math.floor(\n      (delta / millisecondsInSecond) % secondsInMinute\n    );\n    const minutes = Math.floor(\n      (delta / (millisecondsInSecond * secondsInMinute)) % minutesInHour\n    );\n    const hours = Math.floor(\n      (delta / (millisecondsInSecond * secondsInMinute * minutesInHour)) %\n        hoursInDay\n    );\n\n    const days = Math.floor(\n      delta /\n        (millisecondsInSecond * secondsInMinute * minutesInHour * hoursInDay)\n    );\n\n    const timerFormat = `${days}days ${hours}:${minutes}:${seconds}`;\n    renderTimer(timerFormat);\n  }, 1000);\n};\n\nconst renderTimer = string => {\n  document.querySelector('span').innerText = string;\n};\n\ntimer(new Date('2023/01/01'));\n"],"names":["millisecondsInSecond","secondsInMinute","minutesInHour","hoursInDay","timer","targetDate","setInterval","delta","Date","seconds","Math","floor","minutes","hours","days","timerFormat","concat","renderTimer","string","document","querySelector","innerText"],"version":3,"file":"timer-2.43d30a62.js.map"}