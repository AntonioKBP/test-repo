{"mappings":"AASA,SAAAA,gBAAAC,EAAAC,G,wWAAA,IAAMC,KAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAGpCG,MA6DI,W,sBA7DEA,EACQC,G,IAAAC,EAAAD,EAAEC,O,wBACZC,KAAKC,WAAa,KAClBD,KAAKE,UAAW,EAChBF,KAAKD,OAASA,EAEdC,KAAKG,M,yBAGPC,IAAA,O,MAAA,WACE,IAAMC,EAAOL,KAAKM,UAAU,GAC5BN,KAAKD,OAAOM,E,IAEdD,IAAA,Q,MAAA,W,WACE,IAAIJ,KAAKE,SAAT,CAGA,IAAMK,EAAYC,KAAKC,MACvBT,KAAKE,UAAW,EAChBF,KAAKC,WAAaS,aAAY,WAC5B,IACMC,EADcH,KAAKC,MACOF,EAC1BF,EAAOO,EAAKN,UAAUK,GAC5BC,EAAKb,OAAOM,E,GAGX,IAXD,C,IAaJD,IAAA,O,MAAA,WACES,cAAcb,KAAKC,YACnBD,KAAKE,UAAW,EAChB,IAAMG,EAAOL,KAAKM,UAAU,GAC5BN,KAAKD,OAAOM,E,IAEdD,IAAA,Y,MAAA,SAAUU,GAER,IACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAeZ,MAAO,CAAEE,KAZInB,KAAKoB,eAAeC,KAAKC,MAAMR,EAAKI,IAYlCK,MAVDvB,KAAKoB,eAAeC,KAAKC,MAAMR,EAAMI,EAAOD,IAUpCO,QARNxB,KAAKoB,eACnBC,KAAKC,MAAMR,EAAOI,EAAOD,EAAQF,IAOJU,QAJfzB,KAAKoB,eACnBC,KAAKC,MAAMR,EAAQI,EAAOD,EAAQF,EAfrB,M,IAqBjBX,IAAA,iB,MAAA,SAAesB,GACb,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,OAGjC,GAIJ,SAASC,gBAAgB/B,KAAEqB,K,IAAMI,EAARzB,EAAQyB,MAAOC,EAAf1B,EAAe0B,QAASC,EAAxB3B,EAAwB2B,QAC/ClC,KAAKK,UAAUkC,YAAc,GAAYC,OAATR,EAAM,KAAcQ,OAAXP,EAAQ,KAAWO,OAARN,E,CAGtD,IAAMO,MAAQ,IAAInC,MAAM,CACtBE,OAAQ8B,kBAwBVtC,KAAKC,SAASyC,iBAAiB,QAASD,MAAME,MAAMC,KAAKH,QAEzDzC,KAAKI,QAAQsC,iBAAiB,QAASD,MAAMI,KAAKD,KAAKH","sources":["src/js/timer.js"],"sourcesContent":["// const date1 = Date.now();\n\n// setTimeout(() => {\n//   const date2 = Date.now();\n//   console.log(date1);\n//   console.log(date2);\n//   console.log(date2 - date1);\n// }, 3000);\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockFace: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n\n    this.init();\n  }\n\n  init() {\n    const time = this.convertMs(0);\n    this.onTick(time);\n  }\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.convertMs(deltaTime);\n      this.onTick(time);\n      //   updateClockFace(time);\n      //   console.log(`${hours}:${minutes}:${seconds}`);\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = this.convertMs(0);\n    this.onTick(time);\n  }\n  convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = this.addLeadingZero(Math.floor(ms / day));\n    // Remaining hours\n    const hours = this.addLeadingZero(Math.floor((ms % day) / hour));\n    // Remaining minutes\n    const minutes = this.addLeadingZero(\n      Math.floor(((ms % day) % hour) / minute)\n    );\n    // Remaining seconds\n    const seconds = this.addLeadingZero(\n      Math.floor((((ms % day) % hour) % minute) / second)\n    );\n\n    return { days, hours, minutes, seconds };\n  }\n\n  addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n// console.log(refs.startBtn);\n// console.log(refs.stopBtn);\n// console.log(refs.clockFace);\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  refs.clockFace.textContent = `${hours}:${minutes}:${seconds}`;\n}\n\nconst timer = new Timer({\n  onTick: updateClockFace,\n});\n//   intervalId: null,\n//   isActive: false,\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n//     const startTime = Date.now();\n//     this.isActive = true;\n//     this.intervalId = setInterval(() => {\n//       const currentTime = Date.now();\n//       const deltaTime = currentTime - startTime;\n//       const time = convertMs(deltaTime);\n//       updateClockFace(time);\n//       //   console.log(`${hours}:${minutes}:${seconds}`);\n//     }, 1000);\n//   },\n//   stop() {\n//     clearInterval(this.intervalId);\n//     this.isActive = false;\n//   },\n// };\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["_classCallCheck","instance","Constructor","refs","startBtn","document","querySelector","stopBtn","clockFace","Timer","param","onTick","this","intervalId","isActive","init","key","time","convertMs","startTime","Date","now","setInterval","deltaTime","_this","clearInterval","ms","minute","second","hour","day","days","addLeadingZero","Math","floor","hours","minutes","seconds","value","String","padStart","updateClockFace","textContent","concat","timer","addEventListener","start","bind","stop"],"version":3,"file":"timer.39e6e7fa.js.map"}