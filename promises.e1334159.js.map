{"mappings":"AAkCA,IAAIA,KAJJC,KAAO,CACLC,KAAMC,SAASC,cAAc,aAC7BC,KAAMF,SAASC,cAAc,qBAG/B,IAAME,SAAW,IAAIC,SAAQ,SAACC,EAASC,GACrC,IAAMC,EAASC,KAAKC,SAAW,GAC/BC,YAAW,WACLH,EAECF,EADHR,KAAO,wBAIJS,EADHT,KAAO,kB,GAGR,I,IAGLM,SACGQ,MAAK,SAAAC,G,OAASd,KAAKC,KAAKc,UAAY,+BAAwCC,OAALF,E,IAElEG,OAAC,SAAAC,G,OAAUlB,KAAKC,KAAKc,UAAY,sBAAgCC,OAANE,E,IAC3DC,SAAG,W,OAAOnB,KAAKI,KAAKW,UAAY,mC","sources":["src/js/promises.js"],"sourcesContent":["// const promise = new Promise(resolve => {\n//   resolve(10);\n// });\n\n// promise\n//   .then(value => {\n//     return new Promise(resolve => {\n//       resolve(value * 2);\n//     });\n//   })\n//   .then(value => console.log(value));\n\n// ==========================================================================\n\n// const ourPromise = new Promise((resolve, reject) => {\n//   let number = Math.random() > 0.5;\n//   if (number) {\n//     resolve('I am done');\n//   } else {\n//     reject('I am failed');\n//   }\n// })\n//   .then(data => console.log('Data from resolved promise', data))\n//   .catch(error => console.log('I am error', error))\n//   .finally(() => console.log('I am complete anyway'));\n\n// console.log('Our promise -> ', ourPromise);\n\n// ===========================================================================\n\nrefs = {\n  div1: document.querySelector('container'),\n  div2: document.querySelector('containerFinally'),\n};\nlet cake;\nconst birthday = new Promise((resolve, reject) => {\n  const number = Math.random() > 0.5;\n  setTimeout(() => {\n    if (number) {\n      cake = 'Cake is completed 🎂';\n      resolve(cake);\n    } else {\n      cake = 'Cake is Lost 🤨';\n      reject(cake);\n    }\n  }, 1000);\n});\n\nbirthday\n  .then(data => (refs.div1.innerHTML = `Celebrating with Cake 🎂✅ + ${data}`))\n\n  .catch(error => (refs.div1.innerHTML = `Without Cake 🎂❌ + ${error}`))\n  .finally(() => (refs.div2.innerHTML = 'We celebrate the birthday party💝'));\n\n// ====================================================\n\n// const sleep = ms => {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => resolve('123'), ms);\n//   });\n// };\n\n// Promise.all([sleep(1500), sleep(2000), sleep(2500), sleep(1000)]).then(data =>\n//   console.log('All --> finished', data)\n// );\n// Promise.race([sleep(1500), sleep(2000), sleep(2500), sleep(1000)]).then(data =>\n//   console.log('Race --> finished')\n// );\n\n// ============================================================\n\n// const promise = new Promise((resolve, reject) => {\n//   resolve({ key: 'value' });\n//   //   reject({ key: 'failure' });\n// });\n// // console.log(promise);\n// promise\n//   .then(response => {\n//     console.log('then 1 -->', response);\n//     return Object.keys(response);\n//   })\n//   .then(response => console.log('then 2 -->', response))\n//   .catch(error => console.log(error));\n"],"names":["cake","refs","div1","document","querySelector","div2","birthday","Promise","resolve","reject","number","Math","random","setTimeout","then","data","innerHTML","concat","catch","error","finally"],"version":3,"file":"promises.e1334159.js.map"}