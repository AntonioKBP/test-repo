{"mappings":"AASA,SAAAA,gBAAAC,EAAAC,G,wWAAA,IAAMC,KAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAGpCG,MAwBI,W,sBAxBEA,I,wBAEFC,KAAKC,WAAa,KAClBD,KAAKE,UAAW,C,yBAElBC,IAAA,Q,MAAA,WACE,IAAIH,KAAKE,SAAT,CAGA,IAAME,EAAYC,KAAKC,MACvBN,KAAKE,UAAW,EAChBF,KAAKC,WAAaM,aAAY,WAGfC,UAFOH,KAAKC,MACOF,E,GAI/B,IAVD,C,IAYJD,IAAA,O,MAAA,WACEM,cAAcT,KAAKC,YACnBD,KAAKE,UAAW,C,OAGhB,GAIJ,SAASQ,gBAAgBC,KAAEC,K,IAAMC,EAARF,EAAQE,MAAOC,EAAfH,EAAeG,QAASC,EAAxBJ,EAAwBI,QAC/CtB,KAAKK,UAAUkB,YAAc,GAAYC,OAATJ,EAAM,KAAcI,OAAXH,EAAQ,KAAWG,OAARF,E,CAGtD,IAAMG,MAAQ,IAAInB,MAAM,IA+BxB,SAASoB,eAAeC,GACtB,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAGnC,SAASd,UAAUe,GAEjB,IACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAaZ,MAAO,CAAEd,KAVIO,eAAeS,KAAKC,MAAMN,EAAKI,IAU7Bd,MARDM,eAAeS,KAAKC,MAAMN,EAAMI,EAAOD,IAQ/BZ,QANNK,eAAeS,KAAKC,MAAMN,EAAOI,EAAOD,EAAQF,IAMjCT,QAJfI,eACdS,KAAKC,MAAMN,EAAQI,EAAOD,EAAQF,EAbrB,M,CAdjB/B,KAAKC,SAASoC,iBAAiB,SAAS,WACtCZ,MAAMa,O,IAGRtC,KAAKI,QAAQiC,iBAAiB,SAAS,WACrCZ,MAAMc,M","sources":["src/js/timer.js"],"sourcesContent":["// const date1 = Date.now();\n\n// setTimeout(() => {\n//   const date2 = Date.now();\n//   console.log(date1);\n//   console.log(date2);\n//   console.log(date2 - date1);\n// }, 3000);\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockFace: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor() {\n    this.intervalId = null;\n    this.isActive = false;\n  }\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = convertMs(deltaTime);\n      //   updateClockFace(time);\n      //   console.log(`${hours}:${minutes}:${seconds}`);\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n  }\n}\n// console.log(refs.startBtn);\n// console.log(refs.stopBtn);\n// console.log(refs.clockFace);\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  refs.clockFace.textContent = `${hours}:${minutes}:${seconds}`;\n}\n\nconst timer = new Timer({});\n//   intervalId: null,\n//   isActive: false,\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n//     const startTime = Date.now();\n//     this.isActive = true;\n//     this.intervalId = setInterval(() => {\n//       const currentTime = Date.now();\n//       const deltaTime = currentTime - startTime;\n//       const time = convertMs(deltaTime);\n//       updateClockFace(time);\n//       //   console.log(`${hours}:${minutes}:${seconds}`);\n//     }, 1000);\n//   },\n//   stop() {\n//     clearInterval(this.intervalId);\n//     this.isActive = false;\n//   },\n// };\n\nrefs.startBtn.addEventListener('click', () => {\n  timer.start();\n});\n\nrefs.stopBtn.addEventListener('click', () => {\n  timer.stop();\n});\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = addLeadingZero(Math.floor(ms / day));\n  // Remaining hours\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = addLeadingZero(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  );\n\n  return { days, hours, minutes, seconds };\n}\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["_classCallCheck","instance","Constructor","refs","startBtn","document","querySelector","stopBtn","clockFace","Timer","this","intervalId","isActive","key","startTime","Date","now","setInterval","convertMs","clearInterval","updateClockFace","param","days","hours","minutes","seconds","textContent","concat","timer","addLeadingZero","value","String","padStart","ms","minute","second","hour","day","Math","floor","addEventListener","start","stop"],"version":3,"file":"timer.e750ba0d.js.map"}